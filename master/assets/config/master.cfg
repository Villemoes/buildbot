# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use a
# shorter alias to save typing.

c = BuildmasterConfig = {}


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# html.WebStatus home page (linked to the 'titleURL') and is embedded in the
# title of the waterfall HTML page.

c['title'] = 'OE-lite.org CI'
c['titleURL'] = 'http://oe-lite.org/'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but with
# an externally-visible host name which the buildbot cannot figure out without
# some help.

c['buildbotURL'] = 'http://buildbot.oe-lite.org/'


####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave
from buildbot import locks

build_lock = locks.SlaveLock("slave_builds",maxCount = 1)

c['slaves'] = []
all_slaves = []

with open('slaves.txt') as slaves:
    for slave in slaves.readlines():
        try:
            name, password = slave.strip().split(None, 1)
        except ValueError:
            continue
        c['slaves'].append(BuildSlave(
            name, password,max_builds=5,
            properties={
                'oe_parallel_make': '-j8',
            }))
        all_slaves.append(name)
        del name, password

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.  You must define at least 'port' option that
# slaves could connect to your master with this protocol.  'port' must match
# the value configured into the buildslaves (with their --master option)
c['protocols'] = {'pb': {'port': 9989}}


####### CODEBASES

# The 'codebaseGenerator' function is applied to all changes, and the return
# value is applied as codebase attribute.

import re

all_repositories = (
    (r'(?:git|http|https)://github\.com/[^/]+/(?:oe-lite-)?(\w+)\.git',	None),
    (r'git://oe-lite\.org/oe-lite/(\w+)\.git', None),
    (r'git://oe-lite\.org/gitpython/GitPython\.git', 'gitpython'),
    (r'git://oe-lite\.org/([\w\-]+).git', None),
)

def codebaseGenerator(chdict):
    repository = chdict['repository']
    for (pattern, codebase) in all_repositories:
        m = re.match(pattern, repository)
        if m:
            return codebase or m.group(1)
    return ''

c['codebaseGenerator'] = codebaseGenerator


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller

c['change_source'] = []


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In
# this case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.forcesched import FixedParameter, BooleanParameter
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter
from buildbot.util import NotABranch

c['schedulers'] = []

class GithubChangeFilter(filter.ChangeFilter):

    def __init__(self, accept_pr=True, **kwargs):
        if accept_pr:
            assert 'branch' in kwargs
            assert 'branch_re' not in kwargs
            assert 'filter_fn' not in kwargs
            branch = kwargs.pop('branch')
            if not isinstance(branch, list):
                branch = [branch]
            kwargs['branch_re'] = '^(%s|refs/pull/.*/head)' % '|'.join(branch)
            kwargs['filter_fn'] = self.filter_pr
            self.pr_bases = branch
        filter.ChangeFilter.__init__(self, **kwargs)

    def filter_pr(self, change):
        branch = getattr(change, 'branch', '')
        if re.match('^refs/pull/.*/head', branch):
            base = change.properties.getProperty('pull_request_base')
            if base not in self.pr_bases:
                return False
        return True

core_codebases = {
    'core':		{'repository':	'git://github.com/oe-lite/core.git',
                         'branch':	'master',
                         'revision':	None},
    'base':		{'repository':	'git://github.com/oe-lite/base.git',
                         'branch':	'master',
                         'revision':	None},
    'urlgrabber':	{'repository':	'git://oe-lite.org/urlgrabber.git',
                         'branch':	'master',
                         'revision':	None},
}

c['schedulers'].append(SingleBranchScheduler(
    name='core-master',
    builderNames=['core'],
    codebases=core_codebases,
    change_filter=GithubChangeFilter(codebase='core', branch='master'),
    treeStableTimer=None,
    properties = {
        'github_repo_owner': 'oe-lite',
        'github_repo_name': 'core',
        'github_status_update': True,
    },
))

core4_codebases = core_codebases.copy()
core4_codebases['base']['branch'] = '4.0'
c['schedulers'].append(SingleBranchScheduler(
    name='core-4',
    builderNames=['core'],
    codebases=core4_codebases,
    change_filter=GithubChangeFilter(codebase='core', branch='4.0'),
    treeStableTimer=None,
    properties = {
        'github_repo_owner': 'oe-lite',
        'github_repo_name': 'core',
        'github_status_update': True,
    },
))

base_codebases = core_codebases.copy()

c['schedulers'].append(SingleBranchScheduler(
    name='base-master',
    builderNames=['base'],
    codebases=base_codebases,
    change_filter=GithubChangeFilter(codebase='base', branch='master'),
    treeStableTimer=None,
    properties = {
        'github_repo_owner': 'oe-lite',
        'github_repo_name': 'base',
        'github_status_update': True,
    },
))

machine_archs = [
    ('arm-926ejs', 'glibc'),
    ('powerpc-e300c3', 'glibc'),
    ('i686-unknown', 'glibc'),
    ('i686-unknown', 'mingw32'),
]

c['schedulers'].append(Triggerable(
    name='machines',
    builderNames=['machine-%s-%s'%(cpu, distro) for cpu, distro in machine_archs],
    codebases=base_codebases,
))



####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which slaves can execute them.  Note that any
# particular build will only take place on one slave.

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import StringDownload
from buildbot.steps.trigger import Trigger
from buildbot.process.properties import Property, Interpolate, renderer

c['builders'] = []

def has_codebase(step):
    if not step.build.getSourceStamp(step.codebase):
        return False
    if not step.build.getSourceStamp(step.codebase).revision:
        return False
    return True

# OE-lite/core builder
factory = BuildFactory()
factory.addStep(Git(
    repourl='git://github.com/oe-lite/core.git',
    codebase='core',
    mode='full', method='fresh',
    workdir='build/meta/core'))
factory.addStep(Git(
    repourl='git://github.com/oe-lite/base.git',
    codebase='base',
    mode='full', method='fresh',
    workdir='build/meta/base'))
factory.addStep(Git(
    repourl='git://github.com/oe-lite/urlgrabber.git',
    codebase='urlgrabber',
    mode='full', method='fresh',
    workdir='build/lib/urlgrabber'))
factory.addStep(Trigger(
    schedulerNames=['machines'],
    waitForFinish=True))
c['builders'].append(BuilderConfig(
    name='core',
    slavenames=all_slaves,
    factory=factory,
    locks=[build_lock.access('counting')]))

# OE-lite/base builder
factory = BuildFactory()
factory.addStep(Git(
    repourl='git://github.com/oe-lite/core.git',
    codebase='core',
    mode='full', method='fresh',
    workdir='build/meta/core'))
factory.addStep(Git(
    repourl='git://github.com/oe-lite/base.git',
    codebase='base',
    mode='full', method='fresh',
    workdir='build/meta/base'))
factory.addStep(Git(
    repourl='git://github.com/oe-lite/urlgrabber.git',
    codebase='urlgrabber',
    mode='full', method='fresh',
    workdir='build/lib/urlgrabber'))
factory.addStep(Trigger(
    schedulerNames=['machines'],
    waitForFinish=True))
c['builders'].append(BuilderConfig(
    name='base',
    slavenames=all_slaves,
    factory=factory,
    locks=[build_lock.access('counting')]))

# Machine 'bake world' builder
factory = BuildFactory()
# Check out the source
factory.addStep(Git(
    doStepIf=has_codebase,
    repourl='git://github.com/oe-lite/core.git',
    codebase='core',
    mode='full', method='fresh',
    workdir='build/meta/core'))
factory.addStep(Git(
    doStepIf=has_codebase,
    repourl='git://github.com/oe-lite/base.git',
    codebase='base',
    mode='full', method='fresh',
    workdir='build/meta/base'))
factory.addStep(Git(
    repourl='git://github.com/oe-lite/urlgrabber.git',
    codebase='urlgrabber',
    mode='full', method='fresh',
    workdir='build/lib/urlgrabber'))
# Write and log bakery.conf
@renderer
def bakery_conf_renderer(props):
    build = props.getBuild()
    revs = props.getProperty('got_revision')
    bakery_conf = ''
    for layer in ('core', 'base'):
        if layer in revs:
            bakery_conf += 'OESTACK += "meta/%s"\n'%(layer)
    bakery_conf += 'OESTACK += "lib/urlgrabber;pythonpath="\n'
    return bakery_conf
#wipe cache,stamp,work for now until we have better solution
factory.addStep(ShellCommand(
    name='cleanup',
    description='cleanup tmp/cache',
    command=['rm', '-Rf', 'tmp/cache']))
factory.addStep(StringDownload(
    name='write bakery.conf',
    slavedest = 'conf/bakery.conf',
    s=bakery_conf_renderer,
    #s=Interpolate(
    #    '%(src:core:revision:+OESTACK += "meta/core"\n)s'
    #    '%(src:base:revision:+OESTACK += "meta/base"\n)s'
    #    '%(src:urlgrabber:revision:+OESTACK += "lib/urlgrabber;pythonpath="\n)s'
    ))
factory.addStep(ShellCommand(
    name='log bakery.conf',
    description='logging bakery.conf',
    command=['cat', 'conf/bakery.conf']))
# Write and log auto.conf
factory.addStep(StringDownload(
    name='write auto.conf',
    slavedest = 'conf/auto.conf',
    s=Interpolate(
        '%(prop:oe_distro:+DISTRO = "%(prop:oe_distro)s"\n)s'
        '%(prop:oe_machine:+MACHINE = "%(prop:oe_machine)s"\n)s'
        '%(prop:oe_machine_cpu:+MACHINE_CPU = "%(prop:oe_machine_cpu)s"\n)s'
        '%(prop:oe_machine_os:+MACHINE_OS = "%(prop:oe_machine_os)s"\n)s'
        '%(prop:oe_sdk_cpu:+SDK_CPU = "%(prop:oe_sdk_cpu)s"\n)s'
        '%(prop:oe_sdk_os:+SDK_OS = "%(prop:oe_sdk_os)s"\n)s'
        '%(prop:oe_provided:+PROVIDED = "%(prop:oe_provided)s"\n)s'
        '%(prop:oe_parallel_make:+PARALLEL_MAKE = "%(prop:oe_parallel_make)s"\n)s'
        'RMWORK = "0"\n'
    )))
factory.addStep(ShellCommand(
    name='log auto.conf',
    description='logging auto.conf',
    command=['cat', 'conf/auto.conf']))
# Bake!
factory.addStep(ShellCommand(
    name='bake world',
    description='baking world',
    command=['docker', 'run', '--rm',
             '-v', Interpolate('%(prop:builddir)s/build:/build'),
             '-w', '/build',
             'esben/debian-oe-lite:7.8-4.2.0-2',
             'sudo', '-u', 'user',
             'oe', 'bake', 'world']))
build_locks = {}
for cpu, distro in machine_archs:
    bname = 'machine-%s-%s'%(cpu, distro)
    build_locks[bname] = locks.SlaveLock(bname,maxCount = 1)
    c['builders'].append(BuilderConfig(
        name=bname,
        slavenames=all_slaves,
        properties = {
            'oe_machine_cpu': cpu,
            'oe_distro': distro,
            'oe_sdk_cpu': 'i686-unknown',
            'oe_sdk_os': 'linux-gnu',
            'oe_provided': 'all',
        },
        locks=[build_locks[bname].access('counting')],
        factory=factory))



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.github import GitHubStatus

password = file('passwd').readline().strip()
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([('oelite', password)]),
    gracefulShutdown=False,
    forceBuild='auth', # use this to test your slave once it is set up
    forceAllBuilds='auth',  # ..or this
    pingBuilder=False,
    stopBuild=True,
    stopAllBuilds=True,
    cancelPendingBuild=True,
)

def github_codebase(payload):
    return payload['repository']['name']
c['status'].append(html.WebStatus(
    http_port=8010, authz=authz_cfg,
    change_hook_dialects={
        'github': {
            'codebase': github_codebase}},
))

from buildbot.process.properties import renderer

@renderer
def github_repo_revision(props):
    if not props.getProperty('github_status_update', False):
        return None
    codebase = props.getProperty('github_repo_name')
    build = props.getBuild()
    src = build.getSourceStamp(codebase)
    return src.revision

token = file('github_token.txt').readline().strip()
c['status'].append(GitHubStatus(
    token=token,
    repoOwner=Property('github_repo_owner'),
    repoName=Property('github_repo_name'),
    sha=github_repo_revision,
    startDescription='Build started.',
    endDescription='Build done',
))
