# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use a
# shorter alias to save typing.
c = BuildmasterConfig = {}


####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = []

with open('slaves.txt') as slaves:
    for slave in slaves.readlines():
        try:
            name, password = slave.strip().split(None, 1)
        except ValueError:
            continue
        c['slaves'].append(BuildSlave(name, password))
        del name, password

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.  You must define at least 'port' option that
# slaves could connect to your master with this protocol.  'port' must match
# the value configured into the buildslaves (with their --master option)
c['protocols'] = {'pb': {'port': 9989}}


####### CODEBASES

# The 'codebaseGenerator' function is applied to all changes, and the return
# value is applied as codebase attribute.

all_repositories = (
    (r'(?:git|http|https)://github\.com/[^/]+/(?:oe-lite-)?(\w+)\.git',	None),
    (r'git://oe-lite\.org/oe-lite/(\w+)\.git', None),
    (r'git://oe-lite\.org/gitpython/GitPython\.git', 'gitpython'),
    (r'git://oe-lite\.org/([\w\-]+).git', None),
)

def codebaseGenerator(chdict):
    repository = chdict['repository']
    for (pattern, codebase) in all_repositories:
        m = re.match(pattern, repository)
        if m:
            return codebase or m.group(1)
    return ''

c['codebaseGenerator'] = codebaseGenerator


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
    'git://github.com/oe-lite/core.git',
    workdir='gitpoller/core', branch='master',
    pollinterval=300))
c['change_source'].append(GitPoller(
    'git://github.com/esben/core.git',
    workdir='gitpoller/core-esben', branch='master',
    pollinterval=300))
c['change_source'].append(GitPoller(
    'git://github.com/oe-lite/base.git',
    workdir='gitpoller/base', branch='master',
    pollinterval=300))
c['change_source'].append(GitPoller(
    'git://github.com/kimrhh/base.git',
    workdir='gitpoller/base-kimrhh', branch='master',
    pollinterval=300))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In
# this case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
    name='base',
    change_filter=filter.ChangeFilter(branch='master'),
    codebases={
        'core':		{'repository':	'git://github.com/oe-lite/core.git',
                         'branch':	'master',
                         'revision':	None},
        'base':		{'repository':	'git://github.com/oe-lite/base.git',
                         'branch':	'master',
                         'revision':	None},
        'urlgrabber':	{'repository':	'git://oe-lite.org/urlgrabber.git',
                         'branch':	'master',
                         'revision':	None},
    },
    treeStableTimer=None,
    builderNames=['build-world']))
c['schedulers'].append(ForceScheduler(
    name='base-force',
    codebases={
        'core':		{'repository':	'git://github.com/oe-lite/core.git',
                         'branch':	'master',
                         'revision':	None},
        'base':		{'repository':	'git://github.com/oe-lite/base.git',
                         'branch':	'master',
                         'revision':	None},
        'urlgrabber':	{'repository':	'git://oe-lite.org/urlgrabber.git',
                         'branch':	'master',
                         'revision':	None},
    },
    builderNames=['build-world']))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build: what steps, and which slaves can execute them.  Note that any
# particular build will only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.transfer import StringDownload

distro = "glibc"
machine_cpu = "i686-mmx"
machine_os = "linux-gnu"
sdk_cpu = "i686-mmx"
sdk_os = "linux-gnu"
auto_conf = []
auto_conf.append('# OE-lite build configuration generated by buildbot')
auto_conf.append('DISTRO = "%s"'%distro)
auto_conf.append('MACHINE_CPU = "%s"'%machine_cpu)
auto_conf.append('MACHINE_OS = "%s"'%machine_os)
auto_conf.append('SDK_CPU = "%s"'%sdk_cpu)
auto_conf.append('SDK_OS = "%s"'%sdk_os)
auto_conf.append('RMWORK = "0"')
auto_conf.append('PROVIDED = "all"')
auto_conf.append('PARALLEL_MAKE = "-j 4"')
#auto_conf.append(('PREBAKE_URL',self.settings['prebakeUrl']))

bakery_conf = [
    'OESTACK += "meta/core"',
    'OESTACK += "meta/base"',
    'OESTACK += "lib/urlgrabber;pythonpath="',
]

factory = BuildFactory()
# check out the source
factory.addStep(Git(
    repourl='git://github.com/oe-lite/core.git',
    codebase='core',
    mode='full', method='fresh',
    workdir='build/meta/core'))
factory.addStep(Git(
    repourl='git://github.com/oe-lite/base.git',
    codebase='base',
    mode='full', method='fresh',
    workdir='build/meta/base'))
factory.addStep(Git(
    repourl='git://oe-lite.org/urlgrabber.git',
    codebase='urlgrabber',
    mode='full', method='fresh',
    workdir='build/lib/urlgrabber'))

factory.addStep(StringDownload(
        s = '\n'.join(auto_conf) + '\n',
        slavedest = 'conf/auto.conf',
        name="string-download-auto-conf"))
#this is a separate step since it did not work to add auto.conf
#as a file to log in the bake step
factory.addStep(ShellCommand(
        name="log auto.conf",
        description="logging auto.conf",
        command=["cat", "conf/auto.conf"]))

factory.addStep(StringDownload(
        s = '\n'.join(bakery_conf) + '\n',
        slavedest = 'conf/bakery.conf',
        name="string-download-bakery-conf"))

factory.addStep(ShellCommand(
        name="log bakery.conf",
        description="logging bakery.conf",
        command=["cat", "conf/bakery.conf"]))

factory.addStep(ShellCommand(command=["oe", "bake", "world"]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="build-world",
      slavenames=["hetzner-slave1"],
      factory=factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

password = file('passwd').readline().strip()
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([('oelite', password)]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# html.WebStatus home page (linked to the 'titleURL') and is embedded in the
# title of the waterfall HTML page.

c['title'] = "OE-lite.org CI"
c['titleURL'] = "http://oe-lite.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but with
# an externally-visible host name which the buildbot cannot figure out without
# some help.

c['buildbotURL'] = 'http://localhost:8010/'

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url' : 'sqlite:///state.sqlite',
}
